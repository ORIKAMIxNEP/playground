@startuml
class Account {
  - id: AccountId
  - name: AccountName
  - password: Password
  - participatingProjectIds: LinkedHashSet<ProjectId>
  + equals(o: Object): boolean
  + hashCode(): int
}

class AccountId {
  - value: String
  + equals(o: Object): boolean
  + hashCode(): int
}

class AccountName {
  - value: String
}

class Password {
  - value: String
}

Account *-- AccountId
Account *-- AccountName
Account *-- Password
Account "1..*" --> "0..*" ProjectId

class AccountFactory {
  + create(name: AccountName, password: Password): Account
}

AccountFactory ..> Account
AccountFactory ..> IdGenerator

class Project {
  - id: ProjectId
  - name: ProjectName
  - participatedAccountIds: HashSet<AccountId>
  - tasks: LinkedHashSet<Task>
  + createTask(taskFactory: TaskFactory, taskName: TaskName, dueDate: DueDate, maxPostponeCount: MaxPostponeCount): void
  + findTaskByTaskId(taskId: TaskId): Task
  + advanceTaskStatus(taskId: TaskId): void
  + assignAccountToTask(taskId: TaskId, assignedAccountId: AccountId): void
  + deleteTask(taskId: TaskId): void
  + equals(o: Object): boolean
  + hashCode(): int
}

class ProjectId {
  - value: String
  + equals(o: Object): boolean
  + hashCode(): int
}

class ProjectName {
  - value: String
}

Project *-- ProjectId
Project *-- ProjectName
Project "0..*" --> "1..*" AccountId
Project "1" *-- "0..*" Task
Project ..> TaskFactory

class ProjectFactory {
  + create(name: ProjectName): Project
}

ProjectFactory ..> Project
ProjectFactory ..> IdGenerator

class Task {
  - id: TaskId
  - name: TaskName
  - status: Status
  - assignedAccountIds: HashSet<AccountId>
  - dueDate: DueDate
  - postponeCount: PostponeCount
  - maxPostponeCount: MaxPostponeCount
  + advanceStatus(): void
  + assignAccount(assignedAccountId: AccountId): void
  + equals(o: Object): boolean
  + hashCode(): int
}

class TaskId {
  - value: String
}

class TaskName {
  - value: String
}

enum Status {
  UNDONE
  DOING
  DONE
}

class DueDate {
  - value: LocalDateTime
}

class PostponeCount {
  - value: int
}

class MaxPostponeCount {
  - value: int
}

Task *-- TaskId
Task *-- TaskName
Task *-- Status
Task "0..10" --> "0..*" AccountId
Task *-- DueDate
Task *-- PostponeCount
Task *-- MaxPostponeCount

class TaskFactory {
  + create(name: TaskName, dueDate: DueDate, maxPostponeCount: MaxPostponeCount): Task
}

TaskFactory ..> Task
TaskFactory ..> IdGenerator

class IdGenerator {
  {static} - ULID_INSTANCE: ULID
  {static} + generate(): String
}
@enduml
