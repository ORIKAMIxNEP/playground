@startuml
class Account {
  - id: AccountId
  - name: AccountName
  - password: Password
  + equals(o: Object): boolean
  + hashCode(): int
}

class AccountId {
  - value: String
}

class AccountName {
  - value: String
}

class Password {
  - value: String
}

Account *-- AccountId
Account *-- AccountName
Account *-- Password

class AccountFactory {
  + createAccount(name: AccountName, password: Password): Account
}

AccountFactory ..> Account
AccountFactory ..> AccountId
AccountFactory ..> IdGenerator
AccountFactory ..> AccountName
AccountFactory ..> Password

class Project {
  - id: ProjectId
  - name: ProjectName
  - participatingAccounts: HashSet<Account>
  - tasks: HashSet<Task>
  + createTask(taskFactory: TaskFactory, taskName: TaskName): void
  + createDueDateTask(dueDateTaskFactory: DueDateTaskFactory, taskName: TaskName, dueDate: DueDate, maxPostponeCount: MaxPostponeCount): void
  + equals(o: Object): boolean
  + hashCode(): int
}

class ProjectId {
  - value: String
}

class ProjectName {
  - value: String
}

Project *-- ProjectId
Project *-- ProjectName
Project "0.*" --> "1..*" Account
Project "1" *-- "0..*" Task
Project ..> TaskFactory

class ProjectFactory {
  + createProject(name: ProjectName): Project
}

ProjectFactory ..> Project
ProjectFactory ..> ProjectId
ProjectFactory ..> IdGenerator
ProjectFactory ..> ProjectName
ProjectFactory ..> Account
ProjectFactory ..> Task

class Task {
  - id: TaskId
  - name: TaskName
  - status: Status
  - assignedAccounts: HashSet<Account>
  + equals(o: Object): boolean
  + hashCode(): int
}

class TaskId {
  - value: String
}

class TaskName {
  - value: String
}

enum Status {
  UNDONE
  DOING
  DONE
}

Task *-- TaskId
Task *-- TaskName
Task *-- Status

class TaskFactory {
  + createTask(name: TaskName): Task
}

TaskFactory ..> Task
TaskFactory ..> TaskId
TaskFactory ..> IdGenerator
TaskFactory ..> TaskName
TaskFactory ..> Status

class DueDateTask {
  - dueDate: DueDate
  - postponeCount: PostponeCount
  - maxPostponeCount: MaxPostponeCount
}

class DueDate {
  - value: LocalDateTime
}

class PostponeCount {
  - value: int
}

class MaxPostponeCount {
  - value: int
}

DueDateTask --|> Task
DueDateTask *-- DueDate
DueDateTask *-- PostponeCount
DueDateTask *-- MaxPostponeCount

class DueDateTaskFactory {
  + createDueDateTask(name: TaskName, dueDate: DueDate, maxPostponeCount: MaxPostponeCount): DueDateTask
}

DueDateTaskFactory ..> DueDateTask
DueDateTaskFactory ..> TaskId
DueDateTaskFactory ..> IdGenerator
DueDateTaskFactory ..> TaskName
DueDateTaskFactory ..> Status
DueDateTaskFactory ..> DueDate
DueDateTaskFactory ..> PostponeCount
DueDateTaskFactory ..> MaxPostponeCount

class IdGenerator {
  {static} - ULID_INSTANCE: ULID
  {static} + generateId(): String
}
@enduml
