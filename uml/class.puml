@startuml
class Account {
  - accountId: AccountId
  - accountName: AccountName
  - password: Password
    {static} + createAccount(accountName: AccountName, password: Password): Account
    {static} + reconstruct(accountId: AccountId, accountName: AccountName, password: Password): Account
}

class AccountId {
  - value: String
  + equals(o: Object): boolean
  + hashCode(): int
}

class AccountName {
  - value: String
}

class Password {
  - value: String
}

Account *-- AccountId
Account *-- AccountName
Account *-- Password
Account ..> IdGenerator

class Project {
  - projectId: ProjectId
  - projectName: ProjectName
  - participatingAccountIds: HashSet<AccountId>
  - tasks: ListOrderedSet<Task>
  {static} + createProject(projectName: ProjectName): Project
  {static} + reconstructProject(projectId: ProjectId, projectName: ProjectName, participatingAccountIds: HashSet<AccountId>, tasks: ListOrderedSet<Task>): Project
  + createTask(taskName: TaskName): void
  + findTaskByTaskId(taskId: TaskId): Task
  + advanceTaskStatus(taskId: TaskId): void
  + assignAccountToTask(taskId: TaskId, assignedAccountId: AccountId): void
  + deleteTask(taskId: TaskId): void
}

class ProjectId {
  - value: String
}

class ProjectName {
  - value: String
}

Project *-- ProjectId
Project *-- ProjectName
Project "0..*" --> "1..*" AccountId
Project "1" *-- "0..*" Task
Project ..> IdGenerator

class Task {
  - taskId: TaskId
  - taskName: TaskName
  - status: Status
  - assignedAccountIds: HashSet<AccountId>
  - dueDateDetail: DueDateDetail
  {static} + createTask(taskName: TaskName): Task
  {static} + reconstructTask(taskId: TaskId, taskName: TaskName, status: Status, assignedAccountIds: HashSet<AccountId>, dueDateDetail: DueDateDetail): Task
  + advanceStatus(): void
  + assignAccount(assignedAccountId: AccountId): void
  + equals(o: Object): boolean
  + hashCode(): int
}

class TaskId {
  - value: String
}

class TaskName {
  - value: String
}

enum Status {
  UNDONE
  DOING
  DONE
}

Task *-- TaskId
Task *-- TaskName
Task *-- Status
Task "0..10" --> "0..*" AccountId
Task *-- DueDateDetail
Task ..> IdGenerator

class DueDateDetail {
  - dueDate: DueDate
  - postponeCount: PostponeCount
  - maxPostponeCount: MaxPostponeCount
    {static} + createDueDateDetail(dueDate: DueDate, postponeCount: PostponeCount, maxPostponeCount: MaxPostponeCount): DueDateDetail
    {static} + reconstructDueDateDetail(dueDate: DueDate, postponeCount: PostponeCount, maxPostponeCount: MaxPostponeCount): DueDateDetail
}

class DueDate {
  - value: LocalDateTime
}

class PostponeCount {
  - value: int
}

class MaxPostponeCount {
  - value: int
}

DueDateDetail *-- DueDate
DueDateDetail *-- PostponeCount
DueDateDetail *-- MaxPostponeCount

class IdGenerator {
  {static} - ULID_INSTANCE: ULID
  {static} + generate(): String
}
@enduml
