@startuml
class Account {
  - accountId: AccountId
  - accountName: AccountName
  - password: Password
}

class AccountId {
  - value: String
}

class AccountName {
  - value: String
}

class Password {
  - value: String
}

Account *-- AccountId
Account *-- AccountName
Account *-- Password

class Project {
  - projectId: ProjectId
  - projectName: ProjectName
  - participatingAccountIds: Set<AccountId>
  - tasks: LinkedHashSet<Task>
  + createTask(idGenerator: IdGenerator, taskName: TaskName): void
  + findTaskByTaskId(taskId: TaskId): Task
  + updateTask(taskId: TaskId, taskName: TaskName, assignedAccountIds: List<AccountId>): void
  + advanceTaskStatus(taskId: TaskId): Status
  + deleteTask(taskId: TaskId): void
}

class ProjectId {
  - value: String
}

class ProjectName {
  - value: String
}

Project *-- ProjectId
Project *-- ProjectName
Project "0..*" --> "1..*" AccountId
Project "1" *-- "0..*" Task

class Task {
  - taskId: TaskId
  - taskName: TaskName
  - status: Status
  - assignedAccountIds: Set<AccountId>
  - dueDateDetail: DueDateDetail
  + advanceStatus(): void
  + updateTask(taskName: TaskName, assignedAccountIds: List<AccountId>): void
}

class TaskId {
  - value: String
}

class TaskName {
  - value: String
}

enum Status {
  UNDONE
  DOING
  DONE
}

Task *-- TaskId
Task *-- TaskName
Task *-- Status
Task "0..10" --> "0..*" AccountId
Task *-- DueDateDetail

class DueDateDetail {
  - dueDate: DueDate
  - postponeCount: PostponeCount
  - maxPostponeCount: MaxPostponeCount
}

class DueDate {
  - value: LocalDateTime
}

class PostponeCount {
  - value: int
}

class MaxPostponeCount {
  - value: int
}

DueDateDetail *-- DueDate
DueDateDetail *-- PostponeCount
DueDateDetail *-- MaxPostponeCount
@enduml
